package controller

import (
	"encoding/json"
	"log"
	"main/common"
	"main/dao"
	"main/dto"
	"main/response"
	"main/service"
	"main/utils"
	"strconv"

	"github.com/gin-gonic/gin"
)

// 返回一个含有所有敏感类型的map
func ReturnAllKindSensitiveDataMap() map[string]interface{} {
	var data map[string]interface{} = make(map[string]interface{})
	// 固定电话号码
	data["tel2"] = "0755-86627813"
	// 手机号码
	data["tel"] = "13687148956"
	// 身份证, 纳税人识别号
	data["idcard"] = "372523198009045752"
	// 统一社会信用码, 纳税人识别号
	data["id_com"] = "91440300726171773F"
	// 大陆护照号
	data["passport"] = "SE1234567"
	// 港澳通行证号
	data["hkmacao"] = "C12345678"
	// 银行卡号
	data["bank_id"] = "6228480462290014713"
	// 邮箱地址
	data["email"] = "1546@qq.com"
	// 地址
	data["address"] = "广东省深圳市南山区w街道y楼30"
	// 姓名
	data["name"] = "张三"
	// IP地址
	data["ip"] = "10.87.68.10"
	// MAC地址
	data["mac"] = "02:42:ac:11:00:02"
	// 车牌号
	data["car"] = "粤B03999"
	// 不动产证单元号
	data["assets"] = "450101450002GB00740F00010002"
	// 公司名
	data["company"] = "深圳市申鑫富科技有限公司"

	return data
}

// 查询脆弱性与风险的条目
func GetAllRiskAndVulnerability(ctx *gin.Context) {
	db := common.GetDB()

	GetAllRiskAndVulnerabilityParam := dto.GetAllRiskAndVulnerabilityDTOReq{}
	if utils.ResolveParam(ctx, &GetAllRiskAndVulnerabilityParam) != nil {
		return
	}

	riskAndVulnerabilityList, DefaultLength := dao.SelectAllRiskAndVulnerabilityDAO(db, GetAllRiskAndVulnerabilityParam)

	// 构造返回的结构体
	RiskAndVulnerabilityData := dto.GetAllRiskAndVulnerabilityDTOResp{Total: int64(DefaultLength), RiskAndVulnerabilityList: riskAndVulnerabilityList}
	Meta := dto.SuccessResponseMeta{Message: "获取任务列表成功", StatusCode: 200}

	response.Success(ctx, utils.Struct2MapViaJson(RiskAndVulnerabilityData), utils.Struct2MapViaJson(Meta))
}

// 查询触发记录
func GetAllRiskAndVulnerabilityLog(ctx *gin.Context) {
	db := common.GetDB()
	GetAllRiskAndVulnerabilityParam := dto.GetAllRiskAndVulnerabilityLogDTOReq{}
	if utils.ResolveParam(ctx, &GetAllRiskAndVulnerabilityParam) != nil {
		return
	}
	riskAndVulnerabilityLogList, DefaultLength := dao.SelectAllRiskAndVulnerabilityLogDAO(db, GetAllRiskAndVulnerabilityParam)

	// 构造返回的结构体
	RiskAndVulnerabilityData := dto.GetAllRiskAndVulnerabilityLogDTOResp{Total: int64(DefaultLength), RiskAndVulnerabilityLogList: riskAndVulnerabilityLogList}
	Meta := dto.SuccessResponseMeta{Message: "获取任务列表成功", StatusCode: 200}

	response.Success(ctx, utils.Struct2MapViaJson(RiskAndVulnerabilityData), utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟url中存在密码信息
// @Schemes
// @Description 模拟url中存在密码信息
// @Tags 模拟脆弱性相关的接口
// @Param password path int true "填写明文的密码信息"
// @Accept json
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/PswdInURL [get]
func MockURLContainsPasswd(ctx *gin.Context) {
	MockURLContainsPasswdDTOReqParam := dto.MockURLContainsPasswdDTOReq{}
	if utils.ResolveParam(ctx, &MockURLContainsPasswdDTOReqParam) != nil {
		return
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟url中存在密码信息", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟响应数据存在密码信息
// @Schemes
// @Description 模拟响应数据存在密码信息
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/PswdInResp [get]
func MockResponseContainsPasswd(ctx *gin.Context) {

	var data map[string]interface{} = make(map[string]interface{})
	data["password"] = "123456"

	Meta := dto.SuccessResponseMeta{Message: "模拟响应数据存在密码信息", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟cookie中存在密码信息
// @Schemes
// @Description 模拟cookie中存在密码信息,这个接口需要请求头中携带cookie这个字段,并且其中含有密码信息
// @Tags 模拟脆弱性相关的接口
// @Param cookie header string true "cookie中填写明文的密码信息,例如Cookie: expires=Thu, 01 Jan 1970 00:00:00 GMT; password=qwert"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/PswdInCookie [get]
func MockCookieContainsPasswd(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "模拟cookie中存在密码信息", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟请求数据存在明文密码信息
// @Schemes
// @Description 模拟请求数据存在明文密码信息
// @Tags 模拟脆弱性相关的接口
// @Param password query string true "query中填写明文的密码信息,例如password=123456"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/PswdInPlainText [post]
func MockPlainTextContainsPasswd(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "请求数据存在明文密码信息", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟登录弱密码
// @Schemes
// @Description 模拟登录弱密码
// @Tags 模拟脆弱性相关的接口
// @Param password query string true "query中填写明文的密码信息,例如password=123456"
// @Param name query string true "query中填写明文的账号信息,name=admin"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/WeakPasswd [post]
func MockWeakPasswd(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "模拟登录弱密码", StatusCode: 200}
	response.Success(ctx, gin.H{"token": "123456"}, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟响应数据存在密码信息
// @Schemes
// @Description 模拟响应数据存在密码信息
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/PswdInPlainTextResp [get]
func MockPlainTextResponseContainsPasswd(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["password"] = "123456"
	Meta := dto.SuccessResponseMeta{Message: "模拟响应数据存在密码信息", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟 GET方式执行危险操作
// @Schemes
// @Description 模拟 GET方式执行危险操作
// @Tags 模拟脆弱性相关的接口
// @Param delete path string true "路径中存在delete参数,例如delete=1"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/DeleteInGet [get]
func MockDeleteInGet(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "模拟Get中存在delete参数", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟鉴权信息在url中
// @Schemes
// @Description 模拟鉴权信息在url中
// @Tags 模拟脆弱性相关的接口
// @Param sessionid path string true "路径中存在鉴权信息,例如sessionid=1"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/AuthInURL [get]
func MockAuthInURL(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "模拟鉴权信息在url中", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟敏感信息在url中
// @Schemes
// @Description 模拟敏感信息在url中
// @Tags 模拟脆弱性相关的接口
// @Param phone path string true "路径中存在敏感信息,例如phone=13687148956"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/SensitiveDataInURL [get]
func MockSensitiveDataInURL(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "模拟敏感信息在url中", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟敏感接口未鉴权
// @Schemes
// @Description 模拟敏感接口未鉴权,请求中不要带鉴权信息即可
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/SensitiveAPINotSec [post]
func MockSensitiveAPINotAuth(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["address"] = "广东省深圳市南山区w街道y楼30"
	data["bank_id"] = "6228480462290014713"
	data["name"] = "张三"

	Meta := dto.SuccessResponseMeta{Message: "模拟敏感接口未鉴权", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟非敏感接口未鉴权
// @Schemes
// @Description 模拟非敏感接口未鉴权,请求中不要带鉴权信息即可
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/NoneSensitiveAPINotSec [post]
func MockNoneSensitiveAPINotAuth(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "模拟非敏感接口未鉴权", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟敏感接口返回数据量可修改
// @Schemes
// @Description 模拟敏感接口返回数据量可修改, 例如path中存在 query=1&pagenum=1&pagesize=10
// @Tags 模拟脆弱性相关的接口
// @Param query path int true "query是一个可修改的参数, 例如query=1"
// @Param pagenum path int true "pagenum是一个可修改的参数, 例如pagenum=1"
// @Param pagesize path int true "pagesize是一个可修改的参数, 例如pagesize=1"
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/DataAmountCanBeModified [get]
func MockDataAmountCanBeModified(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["name"] = "张三"
	data["tel"] = "13687148956"
	data["tel2"] = "0755-86627813"

	Meta := dto.SuccessResponseMeta{Message: "模拟敏感接口返回数据量可修改", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟单次访问数据量过大
// @Schemes
// @Description 模拟单次访问数据量过大, 例如返回200个姓名
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/TooMuchDataInSingleRequest [get]
func MockTooMuchDataInSingleRequest(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	for count := 1; count <= 200; count++ {
		data[strconv.Itoa(count)] = "张三"
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟单次访问数据量过大", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟单次访问敏感类型过多
// @Schemes
// @Description 模拟单次访问敏感类型过多, 例如返回15种类型的敏感数据
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/TooMuchTypeInSingleRequest [get]
func MockTooMuchTypeInSingleRequest(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "模拟单次访问敏感类型过多", StatusCode: 200}
	response.Success(ctx, ReturnAllKindSensitiveDataMap(), utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟脱敏策略不一致
// @Schemes
// @Description 模拟脱敏策略不一致, 例如返回2种不同类型的脱敏数据
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/DifferentDesensePolicy [get]
func MockDifferentDesensePolicy(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["tel1"] = "13687148956"
	data["tel2"] = "136****8956"
	data["idcard1"] = "372523198009045752"
	data["idcard2"] = "372523********5752"

	Meta := dto.SuccessResponseMeta{Message: "模拟脱敏策略不一致", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟Hadoop未授权访问
// @Schemes
// @Description 模拟Hadoop未授权访问
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /custom/mock/vulnerability/ws/v1/cluster/apps/new-application [post]
func MockHadoopUnAuthorizedAccess(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	var data2 map[string]interface{} = make(map[string]interface{})
	data["application-id"] = "application_1231231312312_0001"

	data2["memory"] = 8192
	data2["vCores"] = 4

	data["maximum-resource-capability"] = data2

	ctx.Header("Pragma", "no-cache")

	Meta := dto.SuccessResponseMeta{Message: "模拟Hadoop未授权访问", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟SonarQube未授权访问
// @Schemes
// @Description 模拟SonarQube未授权访问, 这里的路径不能加/api/auth这个前缀
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /api/settings/values [get]
func MockSonarQubeUnAuthorizedAccess(ctx *gin.Context) {
	type AutoGenerated struct {
		Settings []struct {
			Key          string   `json:"key"`
			Value        string   `json:"value,omitempty"`
			Inherited    bool     `json:"inherited,omitempty"`
			Values       []string `json:"values,omitempty"`
			ParentValues []string `json:"parentValues,omitempty"`
		} `json:"settings"`
	}

	var s AutoGenerated
	pStr := `{"settings":[{"key":"sonaranalyzer-cs.nuget.packageVersion","value":"8.6.1.17183","inherited":true},{"key":"sonaranalyzer.security.cs.pluginVersion","value":"8.3.0.1825","inherited":true},{"key":"sonar.cs.ignoreHeaderComments","value":"true","inherited":true},{"key":"sonar.c.file.suffixes","values":[".c",".h"],"inherited":true},{"key":"sonar.typescript.file.suffixes","values":[".ts",".tsx"],"inherited":true},{"key":"email.fromName","value":"SonarQube","inherited":true},{"key":"sonar.python.xunit.skipDetails","value":"false","inherited":true},{"key":"sonar.plsql.jdbc.driver.class","value":"oracle.jdbc.OracleDriver","inherited":true},{"key":"sonar.go.exclusions","values":["**/vendor/**"],"inherited":true},{"key":"sonar.forceAuthentication","value":"false","inherited":true},{"key":"sonar.notifications.delay","value":"60","inherited":true},{"key":"sonar.cpp.file.suffixes","values":[".cc",".cpp",".cxx",".c++",".hh",".hpp",".hxx",".h++",".ipp"],"inherited":true},{"key":"sonaranalyzer.security.cs.nuget.packageVersion","value":"8.3.0.1825","inherited":true},{"key":"sonaranalyzer-cs.ruleNamespace","value":"SonarAnalyzer.CSharp","inherited":true},{"key":"sonar.cs.analyzeGeneratedCode","value":"false","inherited":true},{"key":"email.smtp_port.secured","value":"25","inherited":true},{"key":"sonar.builtInQualityProfiles.disableNotificationOnUpdate","value":"false","inherited":true},{"key":"sonar.css.file.suffixes","values":[".css",".less",".scss"],"inherited":true},{"key":"sonar.organizations.createPersonalOrg","value":"false","inherited":true},{"key":"sonar.cpd.abap.minimumTokens","value":"100","inherited":true},{"key":"sonar.html.file.suffixes","values":[".html",".xhtml",".cshtml",".vbhtml",".aspx",".ascx",".rhtml",".erb",".shtm",".shtml"],"inherited":true},{"key":"sonar.auth.gitlab.enabled","value":"false","inherited":true},{"key":"sonar.cpd.cross_project","value":"false","inherited":true},{"key":"sonar.vbnet.ignoreHeaderComments","value":"true","inherited":true},{"key":"sonaranalyzer.security.cs.nuget.packageId","value":"SonarAnalyzer.Security","inherited":true},{"key":"sonar.auth.github.groupsSync","value":"false","inherited":true},{"key":"sonar.scala.file.suffixes","values":[".scala"],"inherited":true},{"key":"sonaranalyzer-vbnet.ruleNamespace","value":"SonarAnalyzer.VisualBasic","inherited":true},{"key":"sonar.javascript.ignoreHeaderComments","value":"true","inherited":true},{"key":"sonar.dbcleaner.daysBeforeDeletingClosedIssues","value":"30","inherited":true},{"key":"sonar.dbcleaner.weeksBeforeKeepingOnlyOneSnapshotByMonth","value":"52","inherited":true},{"key":"sonar.lf.gravatarServerUrl","value":"https://secure.gravatar.com/avatar/{EMAIL_MD5}.jpg?s={SIZE}&d=identicon","inherited":true},{"key":"sonar.notifications.runningDelayBeforeReportingStatus","value":"600","inherited":true},{"key":"sonar.jsp.file.suffixes","values":[".jsp",".jspf",".jspx"],"inherited":true},{"key":"sonar.javascript.environments","values":["amd"," applescript"," atomtest"," browser"," commonjs"," couch"," embertest"," flow"," greasemonkey"," jasmine"," jest"," jquery"," meteor"," mocha"," mongo"," nashorn"," node"," phantomjs"," prototypejs"," protractor"," qunit"," rhino"," serviceworker"," shared-node-browser"," shelljs"," webextensions"," worker"," wsh"," yui"],"inherited":true},{"key":"sonar.scm.disabled","value":"false","inherited":true},{"key":"sonar.auth.saml.enabled","value":"false","inherited":true},{"key":"sonar.vbnet.file.suffixes","values":[".vb"],"inherited":true},{"key":"sonar.abap.file.suffixes","values":[".abap",".ab4",".flow",".asprog"],"inherited":true},{"key":"sonar.cfamily.ignoreHeaderComments","value":"true","inherited":true},{"key":"sonar.technicalDebt.developmentCost","value":"30","inherited":true},{"key":"sonar.python.file.suffixes","values":["py"],"inherited":true},{"key":"sonar.cs.file.suffixes","values":[".cs"],"inherited":true},{"key":"sonar.plsql.file.suffixes","values":["sql","pks","pkb"],"inherited":true},{"key":"sonaranalyzer.security.cs.ruleNamespace","value":"SonarAnalyzer.Security","inherited":true},{"key":"sonaranalyzer-vbnet.staticResourceName","value":"SonarAnalyzer-8.6.1.17183.zip","inherited":true},{"key":"sonar.java.file.suffixes","values":[".java",".jav"],"inherited":true},{"key":"sonar.kotlin.file.suffixes","values":[".kt"],"inherited":true},{"key":"sonar.php.file.suffixes","values":["php","php3","php4","php5","phtml","inc"],"inherited":true},{"key":"sonar.xml.file.suffixes","values":[".xml",".xsd",".xsl"],"inherited":true},{"key":"sonar.dbcleaner.weeksBeforeDeletingAllSnapshots","value":"260","inherited":true},{"key":"sonar.auth.github.enabled","value":"false","inherited":true},{"key":"sonar.python.coverage.reportPaths","values":["coverage-reports/*coverage-*.xml"],"inherited":true},{"key":"sonar.javascript.jQueryObjectAliases","values":["$"," jQuery"],"inherited":true},{"key":"sonaranalyzer-vbnet.nuget.packageVersion","value":"8.6.1.17183","inherited":true},{"key":"sonar.go.file.suffixes","values":[".go"],"inherited":true},{"key":"sonar.auth.saml.applicationId","value":"sonarqube","inherited":true},{"key":"sonar.dbcleaner.weeksBeforeKeepingOnlyAnalysesWithVersion","value":"104","inherited":true},{"key":"sonar.php.exclusions","values":["**/vendor/**"],"inherited":true},{"key":"sonar.swift.file.suffixes","values":[".swift"],"inherited":true},{"key":"sonar.vbnet.roslyn.ignoreIssues","value":"false","inherited":true},{"key":"sonar.plsql.ignoreHeaderComments","value":"false","inherited":true},{"key":"sonar.flex.file.suffixes","values":["as"],"inherited":true},{"key":"sonar.auth.gitlab.groupsSync","value":"false","inherited":true},{"key":"sonar.auth.github.apiUrl","value":"https://api.github.com/","inherited":true},{"key":"sonar.ruby.file.suffixes","values":[".rb"],"inherited":true},{"key":"sonar.auth.github.allowUsersToSignUp","value":"true","inherited":true},{"key":"sonar.python.xunit.reportPath","value":"xunit-reports/xunit-result-*.xml","inherited":true},{"key":"sonar.javascript.globals","values":["angular","goog","google","OpenLayers","d3","dojo","dojox","dijit","Backbone","moment","casper"],"inherited":true},{"key":"sonar.dbcleaner.hoursBeforeKeepingOnlyOneSnapshotByDay","value":"24","inherited":true},{"key":"sonar.dbcleaner.daysBeforeDeletingInactiveBranchesAndPRs","value":"30","inherited":true},{"key":"sonar.javascript.exclusions","values":["**/node_modules/**","**/bower_components/**"],"inherited":true},{"key":"sonar.auth.github.webUrl","value":"https://github.com/","inherited":true},{"key":"sonar.dbcleaner.branchesToKeepWhenInactive","values":["master","develop","trunk"],"parentValues":["master","develop","trunk"]},{"key":"sonaranalyzer-vbnet.nuget.packageId","value":"SonarAnalyzer.VisualBasic","inherited":true},{"key":"email.from","value":"noreply@nowhere","inherited":true},{"key":"sonaranalyzer-vbnet.pluginVersion","value":"8.6.1.17183","inherited":true},{"key":"sonar.internal.analysis.failFast","value":"false","inherited":true},{"key":"sonaranalyzer.security.cs.analyzerId","value":"SonarAnalyzer.Security","inherited":true},{"key":"sonar.dbcleaner.weeksBeforeKeepingOnlyOneSnapshotByWeek","value":"4","inherited":true},{"key":"sonaranalyzer-vbnet.analyzerId","value":"SonarAnalyzer.VisualBasic","inherited":true},{"key":"email.prefix","value":"[SONARQUBE]","inherited":true},{"key":"sonar.cs.roslyn.ignoreIssues","value":"false","inherited":true},{"key":"sonaranalyzer-cs.pluginKey","value":"csharp","inherited":true},{"key":"sonaranalyzer.security.cs.pluginKey","value":"securitycsharpfrontend","inherited":true},{"key":"sonar.auth.saml.providerName","value":"SAML","inherited":true},{"key":"sonar.objc.file.suffixes","values":[".m"],"inherited":true},{"key":"sonar.ruby.coverage.reportPaths","values":["coverage/.resultset.json"],"inherited":true},{"key":"sonaranalyzer-cs.staticResourceName","value":"SonarAnalyzer-8.6.1.17183.zip","inherited":true},{"key":"sonar.auth.gitlab.allowUsersToSignUp","value":"true","inherited":true},{"key":"sonaranalyzer-cs.nuget.packageId","value":"SonarAnalyzer.CSharp","inherited":true},{"key":"sonar.authenticator.downcase","value":"false","inherited":true},{"key":"sonaranalyzer-cs.analyzerId","value":"SonarAnalyzer.CSharp","inherited":true},{"key":"sonar.organizations.anyoneCanCreate","value":"false","inherited":true},{"key":"sonar.technicalDebt.ratingGrid","value":"0.05,0.1,0.2,0.5","inherited":true},{"key":"sonar.lf.enableGravatar","value":"false","inherited":true},{"key":"sonaranalyzer-cs.pluginVersion","value":"8.6.1.17183","inherited":true},{"key":"sonaranalyzer.security.cs.staticResourceName","value":"SonarAnalyzer.Security-8.3.0.1825.zip","inherited":true},{"key":"sonar.javascript.file.suffixes","values":[".js",".jsx",".vue"],"inherited":true},{"key":"sonar.cpd.abap.minimumLines","value":"20","inherited":true},{"key":"sonar.vbnet.analyzeGeneratedCode","value":"false","inherited":true},{"key":"sonar.auth.gitlab.url","value":"https://gitlab.com","inherited":true},{"key":"sonaranalyzer-vbnet.pluginKey","value":"vbnet","inherited":true},{"key":"sonar.updatecenter.url","value":"https://update.sonarsource.org/update-center.properties","inherited":true},{"key":"sonar.tsql.file.suffixes","values":[".tsql"],"inherited":true},{"key":"sonar.core.startTime","value":"2022-05-06T07:46:25+0000"},{"key":"sonar.core.id","value":"BF41A1F2-AYCYVZZEJ6EH20P9N6Y5"}]}`

	err := json.Unmarshal([]byte(pStr), &s)
	if err != nil {
		log.Println(err)
	}

	// ctx.Request.Response.Header.Add("Sonar-Version", "8.3.1.34387")
	ctx.Header("Sonar-Version", "8.3.1.34387")

	Meta := dto.SuccessResponseMeta{Message: "模拟SonarQube未授权访问", StatusCode: 200}
	response.Success(ctx, utils.Struct2MapViaJson(s), utils.Struct2MapViaJson(Meta))
	// ctx.Request.Response.Header.Del("Sonar-Version")
}

// 模拟ssh secret key信息泄露
// @Summary 模拟ssh secret key信息泄露
// @Schemes
// @Description 模拟ssh secret key信息泄露
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /fileDownload [post]
func MockSSHSecretKeyLeakage(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})

	data["data"] = `-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEA82oGEfYgQblIYpz0Myjv+9u24VENWxiRLiSIKXSoxkCf3Q6DLy4RPu4PcqtNCo+3aTin6P/pDkEuiFY0qUeLoJd6G24wVjHlNq/r/bv/1NK6Tcux0Y9H+YWUs10Mp0tjSI2wjVb3qPIOgEJCdFAiktTk7H9+M1GYoch4+79A3RhyoL+JYpmZ4ATE7c6ZXYPRJqUjv15jg0rPnYUVOF8Ko9T+BbcXK+QtNr0hEY+8N15UATb8bAEqzikvtUJF3xmhBD9tz++2/gfzGW63LNfIi9O4pVHQPADrcTMFtTyw4KVwPnQjOk8gTrc5kEXeHCq/uvjmNqJfmR/qOYKxYrOY1QIDAQABAoIBACfqfAJYBSQh+R/KszTsgqYfepbqTrFgjvYtIXMC4WZZVJ3Qcmy7NjLGoRvhwWl49c+4bbiEtrgSsknDMTGNPPVhwbFb2WtZFUhpgt6CBMrmn4yAWbGOuHPPlvnuyVNpxmcwbQJQf55hy0T3GKSwO2supDewFIbf25K0KDrIOx/GP62XmwrtyMtpjBa0rjTJw5x+YcBbEDEsRCFWZnp/kbsX5pXJL4d5QUwL+j3rmzP+9FG8/UkFWL8Lxaj3qI46WdK2tW2nsawVgtK19lheEOQn4EG3iV1JwzpMqxhHSfjGsK7QTGF76jlFamJ0uNuWNDvKRA1gJ7rpQY8dr3ayvaECgYEA/G+UmA7Gqb1/B1XbdrJ4meWtMb/70LJvHpNMDWbWmdgsWhAz6CIzigXitZKwM+1RWJYsGK5WHAlN0IOM2Rgxw7pH7I+3REg53Zwk3oHUnGUKSbhlcdWSjpLIgnJWwPpl4QEJSDOBWKvH7qSp1G0vLCk4UDZtywiPrNdJ8lIz3A0CgYEA9tnVrHMIeDGFcVySC3SpfoTVZkvIOg3+pynwbgLjW78Ez14dOVw7x3BH6pS4ZGat6BVH8PYJWF2CxCbvJ1GdhOOe7773jY+wDGJ4uVYI1epoPETNbIGPS1vz/vBsEKCa2lurhhx/Ulz7cwmMqoNLVQQ++1eZJfzmXSbIj7MwVekCgYEAhjhVy9vfaZUmG6JdBGm0ki96vT8VB0w4pQswnteVN0unmWOQFddJjBPBDUYnhhSi8fU3ERBxHIsd4sZvd2bT3vwHDhMEILw+eERznhNuFpHqvHPdDH/AYypMjn94/TamQNKqOseX+KutrIfE/Pvo3xQzqwKlshSlQANggAWRKWkCgYAxaPzqHcRuOotZW4woGtvqZTBJ35VeeXqlfzGO86kKrjuKPm5fEuUsUH80pzwZbKwWrlvOEZFhTKZmGNz5485B0UX4+yKWBVLZx8QeZOgz2U2v8p2jwHMsRGWcfAdFdMBKQNseZwndNJtoNVsgrlMf20+4A5q2Dd8WejLfAKEGMQKBgDjmzxbdDTRih+m3a8PL3rWQp6+sL9HvbfFonl+O8SaEOCOHBZl7AukGNJ61mDevw5T4E2KJgkGNqSjaa4csJ6JPoHJRC7a8lMT8OqGVvXx7scyErMwqZJcfLod3w5rpddiXLtRVwRLoqvP5QDveil4mlZVTB85y4BfU+8c6Xz4E-----END RSA PRIVATE KEY-----`

	Meta := dto.SuccessResponseMeta{Message: "模拟ssh secret key信息泄露", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟JDBC连接字符串信息泄露
// @Schemes
// @Description 模拟JDBC连接字符串信息泄露
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /xxl-conf-admin/conf/find [post]
func MockJDBCStringLeakage(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["shenzhen.datasource"] = "spring.datasource.url=jdbc:oracle:thin:@10.253.135.9:1521/ORCLPDB\r\nspring.datasource.username=ayt\r\nspring.datasource.password=aytajj123\r\nspring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver\r\nspring.datasource.initialSize=1\r\nspring.datasource.minIdle=3\r\nspring.datasource.maxActive=20\r\nspring.datasource.maxWait=60000\r\nspring.datasource.timeBetweenEvictionRunsMillis=60000\r\nspring.datasource.minEvictableIdleTimeMillis=30000\r\nspring.datasource.validationQuery=select 1 from dual\r\nspring.datasource.testWhileIdle=true\r\nspring.datasource.testOnBorrow=false\r\nspring.datasource.testOnReturn=false\r\nspring.datasource.poolPreparedStatements=true\r\nspring.datasource.maxPoolPreparedStatementPerConnectionSize=20\r\nspring.datasource.filters=stat,wall,slf4j\r\nspring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.druid.stat.slowSqlMillis=5000\r\nspring.datasource.useGlobalDataSourceStat=true"

	Meta := dto.SuccessResponseMeta{Message: "模拟JDBC连接字符串信息泄露", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// @Summary 模拟Alibaba Nacos未授权访问
// @Schemes
// @Description 模拟Alibaba Nacos未授权访问
// @Tags 模拟脆弱性相关的接口
// @Produce json
// @Success 200 {object} dto.SuccessResponseMeta "返回成功"
// @Router /nacos/v1/auth/users [post]
func MockHAlibabaNacosUnAuthorizedAccess(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "模拟Alibaba Nacos未授权访问", StatusCode: 200}
	response.Success(ctx, gin.H{"message": "create user ok!", "pagesAvailable": true, "password": "123456"}, utils.Struct2MapViaJson(Meta))
}

/*
	风险
*/

// 1. 账号多地访问
func OneAccountWithMultiPlace(ctx *gin.Context) {

	err := service.ReplayMultiAccount(service.InnerSourceIPList)
	if err != nil {
		Meta := dto.SuccessResponseMeta{Message: "回放包失败", StatusCode: 401}
		response.Fail(ctx, nil, utils.Struct2MapViaJson(Meta))
		return
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟账号多地访问", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 2. 账号多IP访问
func OneAccountWithMultiIP(ctx *gin.Context) {

	err := service.ReplayMultiAccount(service.ForiegnSourceIPList)
	if err != nil {
		Meta := dto.SuccessResponseMeta{Message: "回放包失败", StatusCode: 401}
		response.Fail(ctx, nil, utils.Struct2MapViaJson(Meta))
		return
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟账号多IP访问", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 3. 境内IP有多个账号身份
func LocalIPWithMultiAccount(ctx *gin.Context) {

	err := service.ReplayMultiAccount(service.InnerSourceIPList)
	if err != nil {
		Meta := dto.SuccessResponseMeta{Message: "回放包失败", StatusCode: 401}
		response.Fail(ctx, nil, utils.Struct2MapViaJson(Meta))
		return
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟境内IP有多个账号身份", StatusCode: 200}
	response.Success(ctx, gin.H{"token": ctx.PostForm("name") + "123456"}, utils.Struct2MapViaJson(Meta))
}

// 4. 境外IP有多个账号身份
func ForeignIPWithMultiAccount(ctx *gin.Context) {

	err := service.ReplayMultiAccount(service.ForiegnSourceIPList)
	if err != nil {
		Meta := dto.SuccessResponseMeta{Message: "回放包失败", StatusCode: 401}
		response.Fail(ctx, nil, utils.Struct2MapViaJson(Meta))
		return
	}

	Meta := dto.SuccessResponseMeta{Message: "模拟境外IP有多个账号身份", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 5. 单个账号一段时间内返回大量敏感数据
func MockSingleAccountReturnTooMuchSensitiveDataPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	data["2"] = "张二"
	data["3"] = "张三"
	data["4"] = "张四"
	data["5"] = "张五"
	Meta := dto.SuccessResponseMeta{Message: "模拟单个账号一段时间内返回大量敏感数据(姓名)", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))

}

// 6. 单个IP一段时间内返回大量敏感数据
func MockSingleIPReturnTooMuchSensitiveDataPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "13687148956"
	data["2"] = "13787148956"
	data["3"] = "13987148956"
	data["4"] = "13387148956"
	data["5"] = "18587148956"
	Meta := dto.SuccessResponseMeta{Message: "模拟单个IP一段时间内返回大量敏感数据(手机号)", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 7. 单个账号单次返回大量敏感数据
func MockSingleAccountReturnTooMuchSensitiveDataOnce(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "372523198009045752"
	data["2"] = "372523198009055752"
	data["3"] = "372523198009065752"
	data["4"] = "372523198009075752"
	data["5"] = "372523198009085752"
	Meta := dto.SuccessResponseMeta{Message: "模拟单个账单次返回大量敏感数据(纳税人识别号)", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 8. 单个IP单次返回大量敏感数据
func MockSingleIPReturnTooMuchSensitiveDataOnce(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "0755-86627813"
	data["2"] = "0755-86627814"
	data["3"] = "0755-86627815"
	data["4"] = "0755-86627816"
	data["5"] = "0755-86627817"
	Meta := dto.SuccessResponseMeta{Message: "模拟单个IP单次返回大量敏感数据(座机号)", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 9. 单个账号单次返回敏感数据类型超过15种
func MockSingleAccountReturnTooManyKindsOfSensitiveDataOnce(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "模拟单个账号单次返回敏感数据类型过多(超过8种)", StatusCode: 200}
	response.Success(ctx, ReturnAllKindSensitiveDataMap(), utils.Struct2MapViaJson(Meta))
}

// 10. 单个IP单次返回敏感数据类型超过15种
func MockSingleIPReturnTooManyKindsOfSensitiveDataOnce(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "模拟单个IP单次返回敏感数据类型过多(超过8种)", StatusCode: 200}
	response.Success(ctx, ReturnAllKindSensitiveDataMap(), utils.Struct2MapViaJson(Meta))
}

// 11.单个账号单次返回新类型的敏感数据
func SingleAccountReturnNewTypeSensiDataOnce(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "单个账号单次返回新类型的敏感数据", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 12.单个IP单次返回新类型的敏感数据
func SingleIPReturnNewTypeSensiDataOnce(ctx *gin.Context) {

	Meta := dto.SuccessResponseMeta{Message: "单个IP单次返回新类型的敏感数据", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 13. 单个账号在一段时间内进行请求参数值遍历
func SingleAccountRequestTraversePeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个账号在一段时间内进行请求参数值遍历", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 14.单个IP在一段时间内进行请求参数值遍历
func SingleIPRequestTraversePeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个IP在一段时间内进行请求参数值遍历", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 15. 请求参数值出现新类型
func NewTypeInRequest(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "请求参数值出现新类型", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 16. 请求方法异常
func AbnormalRequestMethod(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "请求方法异常", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 17. 单个账号在一段时间内返回大量4XX
func SingleAccountReturnTooMuch4XXPeriod(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "单个账号在一段时间内返回大量4XX", StatusCode: 400}
	response.Response(ctx, 400, nil, utils.Struct2MapViaJson(Meta))
}

// 18. 单个IP在一段时间内返回大量4XX
func SingleIPReturnTooMuch4XXPeriod(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "单个IP在一段时间内返回大量4XX", StatusCode: 401}
	response.Response(ctx, 401, nil, utils.Struct2MapViaJson(Meta))
}

// 19. 单个账号在一段时间内频繁访问同一API
func SingleAccountVisitSameAPIPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个账号在一段时间内频繁访问同一API", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 20. 单个账号在异常时间段频繁访问同一API
func SingleAccountVisitSameAPIAbnormalPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个账号在异常时间段频繁访问同一API", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 21. 单个IP在一段时间内频繁访问同一API
func SingleIPVisitSameAPIPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个IP在一段时间内频繁访问同一API", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 22. 单个IP在异常时间段频繁访问同一API
func SingleIPVisitSameAPIAbnormalPeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个IP在异常时间段频繁访问同一API", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 23. 请求参数名缺失
func LackOfVarName(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "请求参数名缺失", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 24. 请求参数出现非预期的参数名
func UnexpectedVarName(ctx *gin.Context) {
	Meta := dto.SuccessResponseMeta{Message: "请求参数出现非预期的参数名", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}

// 25. 单个账号在一段时间内进行路径遍历
func SingleAccountPathTraversePeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个账号在一段时间内进行路径遍历", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 26. 单个IP在一段时间内进行路径遍历
func SingleIPPathTraversePeriod(ctx *gin.Context) {
	var data map[string]interface{} = make(map[string]interface{})
	data["1"] = "张一"
	Meta := dto.SuccessResponseMeta{Message: "单个IP在一段时间内进行路径遍历", StatusCode: 200}
	response.Success(ctx, data, utils.Struct2MapViaJson(Meta))
}

// 修改时间
func ModifyDate(ctx *gin.Context) {
	db := common.GetDB()
	//查询配置
	POCConfig, err := dao.SelectPOCConfig(db)
	if err != nil {
		Meta := dto.SuccessResponseMeta{Message: "查询大脑中账号提取的配置失败: " + err.Error(), StatusCode: 401}
		response.Fail(ctx, nil, utils.Struct2MapViaJson(Meta))
	}

	ModifyDateDTOReq := dto.ModifyDateDTOReq{}

	if utils.ResolveURI(ctx, &ModifyDateDTOReq) != nil {
		return
	}

	service.ModifyDate(POCConfig, ModifyDateDTOReq.Date)
	Meta := dto.SuccessResponseMeta{Message: "修改时间成功", StatusCode: 200}
	response.Success(ctx, nil, utils.Struct2MapViaJson(Meta))
}
